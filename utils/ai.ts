'use server';
import OpenAI from 'openai';
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
import { getProductsClient } from '@/action/product';
import { productInformation } from '@/types/product';

export async function askSkinExpert(
  question: string
): Promise<ReadableStream<Uint8Array>> {

  const prowuctInfo=await getProductsClient() as unknown as productInformation[]

  const prompt = `
ЁЯз┤ рждрзБржорж┐ ржПржХржЬржи ржЕржнрж┐ржЬрзНржЮ рж╕рзНржХрж┐ржи ржХрзЗрзЯрж╛рж░ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржПржмржВ ржПржХржЬржи ржжржХрзНрж╖ ржкрж░рж╛ржорж░рзНрж╢ржжрж╛рждрж╛ред ржЗржЙржЬрж╛рж░рзЗрж░ рж╕рзНржХрж┐ржи рж╕ржорж╕рзНржпрж╛рж░ ржнрж┐рждрзНрждрж┐рждрзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ ржирж┐ржЪрзЗрж░ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рждрж╛рж▓рж┐ржХрж╛ ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржХрж╛рж░рзНржпржХрж░ ржПржмржВ ржмрж┐ржЬрзНржЮрж╛ржирж╕ржорзНржоржд рж╕ржорж╛ржзрж╛ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░ржмрзЗред

ЁЯУМ **рждрзЛржорж╛рж░ ржХрж░ржгрзАрзЯ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ:**

1. ржЗржЙржЬрж╛рж░рзЗрж░ рж╕рзНржХрж┐ржи рж╕ржорж╕рзНржпрж╛рж░ ржмрж░рзНржгржирж╛ ржоржирзЛржпрзЛржЧ ржжрж┐рзЯрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЛ ржПржмржВ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорзНржнрж╛ржмрзНржп ржХрж╛рж░ржг ржмрж╛ ржзрж░ржг ржмрж╛ржВрж▓рж╛рзЯ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЛ (ржпрзЗржоржи: рждрзИрж▓рж╛ржХрзНрждрждрж╛, рж╢рзБрж╖рзНржХрждрж╛, ржмрзНрж░ржг ржкрзНрж░ржмржгрждрж╛ ржЗрждрзНржпрж╛ржжрж┐)ред
2. ржирж┐ржЪрзЗрж░ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рждрж╛рж▓рж┐ржХрж╛ ржерзЗржХрзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ **рж╕ржарж┐ржХ ржорж┐рж▓ржпрзБржХрзНржд ржкрзНрж░рзЛржбрж╛ржХрзНржЯ/рж╕ржорж╛ржзрж╛ржи** ржмрзЗржЫрзЗ ржирж╛ржУ тАФ ржмрж╛рж╣рзНржпрж┐ржХ ржмрж╛ ржЕрждрж┐рж░рж┐ржХрзНржд ржХрзЛржирзЛ рждржерзНржп ржмрж╛ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржпрзБржХрзНржд ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред
3. ржкрзНрж░рждрж┐ржЯрж┐ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░:
   - рж╕рзБржмрж┐ржзрж╛ (benefits),
   - рж╕ржорж╕рзНржпрж╛рж░ ржЙржкрж░ ржкрзНрж░ржнрж╛ржм (effectiveness),
   - ржПржмржВ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рж╕ржарж┐ржХ рж╕ржорзЯ ржмрж╛ ржирж┐рзЯржо (usage time)
   
   ржПрж╕ржм ржмрж╛ржВрж▓рж╛рзЯ **ржорж╛ржЭрж╛рж░рж┐ ржжрзИрж░рзНржШрзНржпрзЗрж░ ржПржХржЯрж┐ ржкрзНржпрж╛рж░рж╛ржЧрзНрж░рж╛ржлрзЗ** рж╕рж╣ржЬ ржнрж╛рж╖рж╛рзЯ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЛред (ржЦрзБржм ржЫрзЛржЯ ржмрж╛ ржжрзАрж░рзНржШ рж╣ржмрзЗ ржирж╛)
4. рж╕ржмрж╢рзЗрж╖рзЗ **рж╕рж╛ржЬрзЗрж╕рзНржЯ ржХрж░рж╛ ржкрзНрж░рзЛржбрж╛ржХрзНржЯржЧрзБрж▓рзЛрж░ ржирж╛ржо ржПржХржЯрж┐ ржкрж░рж┐рж╖рзНржХрж╛рж░ Bullet List ржЖржХрж╛рж░рзЗ ржЙржкрж╕рзНржерж╛ржкржи ржХрж░рзЛред**
5. ржкрзНрж░рзЯрзЛржЬржирзЗ ржПржХрж╛ржзрж┐ржХ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж╕рж╛ржЬрзЗрж╕рзНржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЛ, рждржмрзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ ржпржжрж┐ рждрж╛рж░рж╛ ржПржХрж╕рж╛ржерзЗ ржХрж╛рж░рзНржпржХрж░ рж╣рзЯред

ЁЯУЭ **ржЗржЙржЬрж╛рж░рзЗрж░ ржкрзНрж░рж╢рзНржи ржмрж╛ рж╕рзНржХрж┐ржи рж╕ржорж╕рзНржпрж╛:**
${question}

ЁЯУж **ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рждрж╛рж▓рж┐ржХрж╛ (рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ):**
${JSON.stringify(prowuctInfo, null, 2)}
`;

  
  const completion = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    stream: true,
    messages: [{ role: 'user', content: prompt }],
  });


  const encoder = new TextEncoder();


  const stream = new ReadableStream({
    
    async start(controller) {
      for await (const chunk of completion) {
        const content = chunk.choices[0]?.delta?.content;
        if (content) {
          controller.enqueue(encoder.encode(content));
        }
      }
      controller.close();
    },
  });

  return stream;
}
